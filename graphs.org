# -*- org-confirm-babel-evaluate: nil; -*-
#+SETUPFILE: org-html-themes/setup/theme-readtheorg.setup

* History


** Volume last 12 months
#+header: :var value="vol"
#+header: :var time="month"
#+header: :var months=12
#+begin_src python :session plots :results file :exports results
filename = fit_path + "/../data/vol.png"
graph.draw_line_graph(trains, value, time, months, "all", filename)
filename
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/cli/../data/vol.png]]


** Reps last 6 months
#+header: :var value="reps"
#+header: :var time="month"
#+header: :var months=6
#+begin_src python :session plots :results file :exports results
filename = fit_path + "/../data/reps.png"
graph.draw_line_graph(trains, value, time, months, "all", filename)
filename
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/cli/../data/reps.png]]


** Reps Abs last 6 months
#+header: :var value="reps"
#+header: :var time="month"
#+header: :var months=6
#+begin_src python :session plots :results file :exports results
filename = fit_path + "/../data/abs-reps.png"
graph.draw_line_graph(trains, value, time, months, "Abs", filename)
filename
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/cli/../data/abs-reps.png]]


* Breakdown
** Reps By muscle last month
#+header: :var value="reps"
#+header: :var period="month"
#+begin_src python :session plots :results file :exports results
filename = fit_path + "/../data/bd-reps.png"
graph.draw_pie_graph(trains, value, period, filename)
filename
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/cli/../data/bd-reps.png]]


** Vol By muscle last week
#+header: :var value="vol"
#+header: :var period="week"
#+begin_src python :session plots :results file :exports results
filename = fit_path + "/../data/bd-vol.png"
graph.draw_pie_graph(trains, value, period, filename)
filename
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/cli/../data/bd-vol.png]]


* Workouts
#+INCLUDE: "data/res.org" :minlevel 2


* Experiments



#+name: muscles
#+begin_src python :session plots :exports none :results output
graph.get_all_muscles(trains)
#+end_src

#+RESULTS: muscles
: count  date  weight
: muscle                        
: Abs          235   235     127
: Back         200   200     200
: Biceps        83    83      83
: Chest        130   130     130
: Legs         183   183     180
: Shoulders    107   107     107
: Triceps       40    40      40






#+RESULTS:
[[file:/home/guancio/Sources/org-fit/data/13.png]]



#+header: :var value="sets" period="day" months="all" muscle="all"
#+begin_src python :session plots :results file :exports results
graph.draw_line_graph(trains, value, period, months, muscle, data_path)
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/data/58.png]]


#+header: :var value="reps" period="month" 
#+begin_src python :session plots :results file :exports results
graph.draw_pie_graph(trains, value, period, data_path)
#+end_src

#+RESULTS:
[[file:/home/guancio/Sources/org-fit/data/59.png]]
#+begin_src python :session plots :results value table :exports results
import pandas as pd
import numpy as np
to_process = trains.copy()
to_process = to_process.set_index('date')
to_process= to_process.sort_index()
filtered = to_process
filtered = to_process

filtered['volume'] = filtered['weight'] * filtered['count']
filtered.set_index('muscle')
filtered['reps'] = filtered['count']
grouped = filtered.groupby('muscle')
values = grouped.agg({'volume': np.sum})
[x.split(',') for x in values.to_csv().split('\n')]
#+end_src

#+RESULTS:
| muscle    |  volume |
| Abs       | 43277.5 |
| Back      | 58853.8 |
| Biceps    | 12550.0 |
| Chest     | 35488.5 |
| Legs      | 40050.0 |
| Shoulders | 21707.5 |
| Triceps   | 12502.0 |
|           |         |


#+begin_src python :session plots :results value table :exports results
to_process = trains.copy()
to_process = to_process.set_index('date')
to_process= to_process.sort_index()
group_freq = 'MS'
to_process['volume'] = to_process['weight'] * to_process['count']
to_process['reps'] = to_process['count']
grouped = to_process.groupby(pd.Grouper(freq=group_freq))
values = grouped.agg({
  'count': np.size,
  'reps': np.sum,
  'volume': np.sum})
k = values.keys()[0]
values = values[values[k] > 0]
[x.split(',') for x in values.to_csv().split('\n')]
#+end_src

#+RESULTS:
|       date | count |  volume |   reps |
| 2018-01-01 |  30.0 |  7133.0 |  343.0 |
| 2018-02-01 |  75.0 | 16695.5 |  840.0 |
| 2018-03-01 |  93.0 | 20857.0 | 1017.0 |
| 2018-04-01 | 163.0 | 37208.5 | 1663.0 |
| 2018-05-01 |  64.0 | 13150.0 |  690.0 |
| 2018-06-01 | 104.0 | 25575.0 | 1092.0 |
| 2018-07-01 | 180.0 | 40475.2 | 1702.0 |
| 2018-08-01 | 120.0 | 27961.5 | 1050.0 |
| 2018-09-01 | 126.0 | 29148.4 | 1117.0 |
| 2018-10-01 |  23.0 |  6225.2 |  184.0 |
|            |       |         |        |
